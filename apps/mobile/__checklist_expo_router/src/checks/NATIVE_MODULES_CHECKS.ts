import { type CheckItem } from "./types";
import { findVersion } from "./utils";

export const NATIVE_MODULES_CHECKS: Array<CheckItem | string> = [
  "native modules",
  {
    id: "WEBVIEW",
    url: "/webview",
    title: "Web View",
    description: "Web View component",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-webview",
    nativeModuleVersion: findVersion("react-native-webview"),
  },
  {
    id: "MMKV",
    url: "/mmkv",
    title: "MMKV",
    description: "MMKV persistent storage",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-mmkv",
    nativeModuleVersion: findVersion("react-native-mmkv"),
  },
  {
    id: "SVG",
    url: "/svg",
    title: "SVG",
    description: "SVG support",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-svg",
    nativeModuleVersion: findVersion("react-native-svg"),
  },
  {
    id: "PDF",
    url: "/pdf",
    title: "PDF",
    description: "PDF",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-pdf",
    nativeModuleVersion: findVersion("react-native-pdf"),
  },
  {
    id: "REANIMATED",
    url: "/reanimated",
    title: "Reanimated",
    description: "Reanimated",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-reanimated",
    nativeModuleVersion: findVersion("react-native-reanimated"),
  },
  {
    id: "GESTURE-HANDLER",
    url: "/gesture-handler",
    title: "Gesture Handler",
    description: "Gesture Handler",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-gesture-handler",
    nativeModuleVersion: findVersion("react-native-gesture-handler"),
  },
  {
    id: "SHARE",
    url: "/share",
    title: "Share",
    description: "Share",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-share",
    nativeModuleVersion: findVersion("react-native-share"),
  },
  {
    id: "NETINFO",
    url: "/netinfo",
    title: "NetInfo",
    description: "NetInfo",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "@react-native-community/netinfo",
    nativeModuleVersion: findVersion("@react-native-community/netinfo"),
  },
  {
    id: "DEVICE-INFO",
    url: "/device-info",
    title: "Device Info",
    description: "Device Info",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-device-info",
    nativeModuleVersion: findVersion("react-native-device-info"),
  },
  {
    id: "UNIVERSAL-TOOLTIP",
    url: "/universal-tooltip",
    title: "Universal Tooltip",
    description: "Universal Tooltip",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "universal-tooltip",
    nativeModuleVersion: findVersion("universal-tooltip"),
  },
  {
    id: "WALKTHROUGH-TOOLTIP",
    url: "/walkthrough-tooltip",
    title: "Walkthrough Tooltip",
    description: "Walkthrough Tooltip",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "react-native-walkthrough-tooltip",
    nativeModuleVersion: findVersion("react-native-walkthrough-tooltip"),
  },
  {
    id: "IDFA",
    url: "/idfa",
    title: "IDFA",
    description: "idfa (ios) and aaid (android)",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "@sparkfabrik/react-native-idfa-aaid",
    nativeModuleVersion: findVersion("@sparkfabrik/react-native-idfa-aaid"),
  },
  {
    id: "SLIDER",
    url: "/slider",
    title: "Slider",
    description: "Slider",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "@react-native-community/slider",
    nativeModuleVersion: findVersion("@react-native-community/slider"),
  },
  {
    id: "ASYNC-STORAGE",
    url: "/async-storage",
    title: "Async Storage",
    description: "Async Storage",
    checkedIos: "checked",
    checkedAndroid: "checked",
    nativeModuleName: "@react-native-async-storage/async-storage",
    nativeModuleVersion: findVersion(
      "@react-native-async-storage/async-storage"
    ),
  },
];
